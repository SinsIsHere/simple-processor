// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/07/2021 14:07:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          A_simple_processor_with_fucking_ROM_or_something
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module A_simple_processor_with_fucking_ROM_or_something_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Mem_Clock;
reg Pro_Clock;
reg Run;
// wires                                               
wire [4:0] Address;
wire [8:0] Bus_Wire;
wire [8:0] DIN;
wire Done;
wire [8:0] IR;
wire [8:0] R0;
wire [8:0] R1;
wire [8:0] RA;
wire [8:0] RG;
wire [2:0] Ystep_Q;

// assign statements (if any)                          
A_simple_processor_with_fucking_ROM_or_something i1 (
// port map - connection between master ports and signals/registers   
	.Address(Address),
	.Bus_Wire(Bus_Wire),
	.DIN(DIN),
	.Done(Done),
	.IR(IR),
	.Mem_Clock(Mem_Clock),
	.Pro_Clock(Pro_Clock),
	.R0(R0),
	.R1(R1),
	.RA(RA),
	.RG(RG),
	.Run(Run),
	.Ystep_Q(Ystep_Q)
);
initial 
begin 
#1000000 $finish;
end 

// Mem_Clock
initial
begin
	Mem_Clock = 1'b0;
	Mem_Clock = #40000 1'b1;
	Mem_Clock = #10000 1'b0;
	Mem_Clock = #10000 1'b1;
	Mem_Clock = #10000 1'b0;
	Mem_Clock = #70000 1'b1;
	Mem_Clock = #10000 1'b0;
	Mem_Clock = #130000 1'b1;
	Mem_Clock = #10000 1'b0;
	Mem_Clock = #170000 1'b1;
	Mem_Clock = #10000 1'b0;
end 

// Pro_Clock
always
begin
	Pro_Clock = 1'b0;
	Pro_Clock = #10000 1'b1;
	#10000;
end 

// Run
initial
begin
	Run = 1'b0;
	Run = #40000 1'b1;
	Run = #20000 1'b0;
	Run = #100000 1'b1;
	Run = #20000 1'b0;
	Run = #120000 1'b1;
	Run = #20000 1'b0;
	Run = #160000 1'b1;
	Run = #20000 1'b0;
end 
endmodule

